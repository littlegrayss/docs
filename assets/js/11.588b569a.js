(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{232:function(t,e,_){"use strict";_.r(e);var i=_(0),v=Object(i.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),_("h3",{attrs:{id:"git原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git原理"}},[t._v("#")]),t._v(" git原理")]),t._v(" "),_("h4",{attrs:{id:"git对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git对象"}},[t._v("#")]),t._v(" git对象")]),t._v(" "),_("h4",{attrs:{id:"git三个阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git三个阶段"}},[t._v("#")]),t._v(" git三个阶段")]),t._v(" "),_("h3",{attrs:{id:"git-操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-操作"}},[t._v("#")]),t._v(" git 操作")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("丢弃所有修改过未提交add的文件")]),t._v(" "),_("p",[_("code",[t._v("git checkout .")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git add")]),t._v(" 撤销")]),t._v(" "),_("p",[_("code",[t._v("git status")]),t._v("  查看add的文件\n"),_("code",[t._v("git reset HEAD")]),t._v("  撤销上一次add的全部文件\n"),_("code",[t._v("git reset HEAD *.file")]),t._v("  撤销某个文件")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git commit")]),t._v(" 撤销\n"),_("code",[t._v("git log")]),t._v("  查看提交记录，找到提交的id\n"),_("code",[t._v("git reset commit_id")]),t._v("  撤回提交")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git push")]),t._v(" 撤销\n"),_("code",[t._v("git revert HEAD")]),t._v("  撤销前一次提交\n"),_("code",[t._v("git revert commit_id")]),t._v(" 撤销制定版本")])]),t._v(" "),_("li",[_("p",[t._v("删除untracked files（未监控文件）")]),t._v(" "),_("p",[_("code",[t._v("git clean -nf/-nfd")]),t._v("  删除之前先确认会删除哪些文件\n"),_("code",[t._v("git clean -f")]),t._v("  删除文件\n"),_("code",[t._v("git clean -fd")]),t._v("  删除目录与文件")])]),t._v(" "),_("li",[_("p",[t._v("切换到远程分支")]),t._v(" "),_("p",[_("code",[t._v("git pull origin")]),t._v("  先拉取远程分支")]),t._v(" "),_("p",[_("code",[t._v("git branch -a")]),t._v("  查看所有分支名以及当前分支\n"),_("code",[t._v("git checkout -b branchA origin/branchA")]),t._v("  新建本地分支并拉取远程分支")])]),t._v(" "),_("li",[_("p",[t._v("删除分支")]),t._v(" "),_("p",[_("code",[t._v("git branch -d branch1")])]),t._v(" "),_("p",[_("code",[t._v("git branch -D branch1")]),t._v(" （强制删除）")])]),t._v(" "),_("li",[_("p",[t._v("恢复误删分支")]),t._v(" "),_("p",[_("code",[t._v("git log -g")]),t._v("  找回之前提交的commit")]),t._v(" "),_("p",[_("code",[t._v("git branch new_branch commit_id")]),t._v("  用这个commit创建一个分支")]),t._v(" "),_("p",[_("code",[t._v("git checkout new_branch")]),t._v("  切换到new_branch分支，检查文件是否存在")])]),t._v(" "),_("li",[_("p",[t._v("挑选某一分支的某些提交到自己分支上")]),t._v(" "),_("p",[_("code",[t._v("git checkout branch2")]),t._v("  先切换到某个分支")]),t._v(" "),_("p",[_("code",[t._v("git log")]),t._v("  查看想要挑选的提交commit_id")]),t._v(" "),_("p",[_("code",[t._v("git checkout branch1")]),t._v("  切换到想要合并到的分支")]),t._v(" "),_("p",[_("code",[t._v("git log")]),t._v("  查看提交")]),t._v(" "),_("p",[_("code",[t._v("git cherry-pick commit_id")]),t._v("  把branch2的某个提交（commit_id）合并到branch1分支上")]),t._v(" "),_("p",[t._v("(如果出现冲突，先解决冲突，再手动提交)")]),t._v(" "),_("p",[_("code",[t._v("git cherry-pick -n")]),t._v("  不会自动提交")]),t._v(" "),_("p",[_("code",[t._v("git cherry-pick --quit")]),t._v("  中断这次cherry-pick")]),t._v(" "),_("p",[_("code",[t._v("git cherry-pick --abort")]),t._v("  取消这次cherry-pick，回到分支之前的状态")])]),t._v(" "),_("li",[_("p",[t._v("保存中间状态，要切换分支但又不想提交")]),t._v(" "),_("p",[_("code",[t._v("git stash")]),t._v("  保存起来，分支回到最初状态")]),t._v(" "),_("p",[_("code",[t._v("git stash list")]),t._v("  查看已保存的内容")]),t._v(" "),_("p",[_("code",[t._v("git stash apply [stash@{0}]")]),t._v("  应用某个已保存的内容")]),t._v(" "),_("p",[_("code",[t._v("git stash drop [stash@{0}]")]),t._v("  丢弃已保存的内容")])]),t._v(" "),_("li",[_("p",[t._v("配置个人用户名及电子邮箱\n"),_("code",[t._v("git config user.name 'xxx'")]),t._v(" "),_("code",[t._v("git config user.email xxx@xxx")])])]),t._v(" "),_("li",[_("p",[t._v("配置自动push，不用输入账号密码")]),t._v(" "),_("p",[_("code",[t._v("git config --global credential.helper store")])]),t._v(" "),_("p",[_("code",[t._v("config --global push.default simple")])])]),t._v(" "),_("li",[_("p",[t._v("更改所有提交记录的邮箱信息")])])]),t._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" filter-branch --commit-filter "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\n        if [ \""),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GIT_AUTHOR_EMAIL")]),t._v('" = "username@gmail.com" ];\n        then\n                GIT_AUTHOR_NAME="username";\n                GIT_AUTHOR_EMAIL="new_username@gmail.com";\n                git commit-tree "'),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v('";\n        else\n                git commit-tree "'),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v("\";\n        fi'")]),t._v(" HEAD\n")])])]),_("h3",{attrs:{id:"gitingore"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gitingore"}},[t._v("#")]),t._v(" .gitingore")]),t._v(" "),_("ol",[_("li",[t._v("忽略一个特定的文件：/filename.extension")]),t._v(" "),_("li",[t._v("忽略所有同名的文件：filename.extension")]),t._v(" "),_("li",[t._v("忽略一个特定的目录：folder/ （这会连同其下所有子目录及文件都被忽略）")]),t._v(" "),_("li",[t._v("但是排除一个特定的模式：（在 3 的基础上）!folder/some/important/filename.extension")]),t._v(" "),_("li",[t._v("忽略指定目录下所有子目录下的特定文件：folder/**/filename.extension")]),t._v(" "),_("li",[t._v("同上，但是只匹配文件扩展名：folder/**/*.extension")]),t._v(" "),_("li",[t._v("同上，但是只匹配特定的目录：folder/**/tmp/")]),t._v(" "),_("li",[t._v("忽略一个根目录下的文件： /folder （不包括/folder2/folder，不包括/folder本身）")])]),t._v(" "),_("h3",{attrs:{id:"问题解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题解决"}},[t._v("#")]),t._v(" 问题解决")]),t._v(" "),_("p",[t._v("解决Git refusing to merge unrelated histories\n原因：\n方案：在git pull origin master后面跟上参数--allow-unrelated-histories")])])}),[],!1,null,null,null);e.default=v.exports}}]);