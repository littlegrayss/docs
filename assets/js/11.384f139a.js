(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{214:function(e,_,t){"use strict";t.r(_);var v=t(0),i=Object(v.a)({},(function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[e._v("#")]),e._v(" Git")]),e._v(" "),t("h3",{attrs:{id:"git-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-操作"}},[e._v("#")]),e._v(" git 操作")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("丢弃所有修改过未提交add的文件")]),e._v(" "),t("p",[t("code",[e._v("git checkout .")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("git add")]),e._v(" 撤销")]),e._v(" "),t("p",[t("code",[e._v("git status")]),e._v("  查看add的文件\n"),t("code",[e._v("git reset HEAD")]),e._v("  撤销上一次add的全部文件\n"),t("code",[e._v("git reset HEAD *.file")]),e._v("  撤销某个文件")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("git commit")]),e._v(" 撤销\n"),t("code",[e._v("git log")]),e._v("  查看提交记录，找到提交的id\n"),t("code",[e._v("git reset commit_id")]),e._v("  撤回提交")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("git push")]),e._v(" 撤销\n"),t("code",[e._v("git revert HEAD")]),e._v("  撤销前一次提交\n"),t("code",[e._v("git revert commit_id")]),e._v(" 撤销制定版本")])]),e._v(" "),t("li",[t("p",[e._v("删除untracked files（未监控文件）")]),e._v(" "),t("p",[t("code",[e._v("git clean -nf/-nfd")]),e._v("  删除之前先确认会删除哪些文件\n"),t("code",[e._v("git clean -f")]),e._v("  删除文件\n"),t("code",[e._v("git clean -fd")]),e._v("  删除目录与文件")])]),e._v(" "),t("li",[t("p",[e._v("切换到远程分支")]),e._v(" "),t("p",[t("code",[e._v("git pull origin")]),e._v("  先拉取远程分支")]),e._v(" "),t("p",[t("code",[e._v("git branch -a")]),e._v("  查看所有分支名以及当前分支\n"),t("code",[e._v("git checkout -b branchA origin/branchA")]),e._v("  新建本地分支并拉取远程分支")])]),e._v(" "),t("li",[t("p",[e._v("删除分支")]),e._v(" "),t("p",[t("code",[e._v("git branch -d branch1")])]),e._v(" "),t("p",[t("code",[e._v("git branch -D branch1")]),e._v(" （强制删除）")])]),e._v(" "),t("li",[t("p",[e._v("恢复误删分支")]),e._v(" "),t("p",[t("code",[e._v("git log -g")]),e._v("  找回之前提交的commit")]),e._v(" "),t("p",[t("code",[e._v("git branch new_branch commit_id")]),e._v("  用这个commit创建一个分支")]),e._v(" "),t("p",[t("code",[e._v("git checkout new_branch")]),e._v("  切换到new_branch分支，检查文件是否存在")])]),e._v(" "),t("li",[t("p",[e._v("挑选某一分支的某些提交到自己分支上")]),e._v(" "),t("p",[t("code",[e._v("git checkout branch2")]),e._v("  先切换到某个分支")]),e._v(" "),t("p",[t("code",[e._v("git log")]),e._v("  查看想要挑选的提交commit_id")]),e._v(" "),t("p",[t("code",[e._v("git checkout branch1")]),e._v("  切换到想要合并到的分支")]),e._v(" "),t("p",[t("code",[e._v("git log")]),e._v("  查看提交")]),e._v(" "),t("p",[t("code",[e._v("git cherry-pick commit_id")]),e._v("  把branch2的某个提交（commit_id）合并到branch1分支上")]),e._v(" "),t("p",[e._v("(如果出现冲突，先解决冲突，再手动提交)")]),e._v(" "),t("p",[t("code",[e._v("git cherry-pick -n")]),e._v("  不会自动提交")]),e._v(" "),t("p",[t("code",[e._v("git cherry-pick --quit")]),e._v("  中断这次cherry-pick")]),e._v(" "),t("p",[t("code",[e._v("git cherry-pick --abort")]),e._v("  取消这次cherry-pick，回到分支之前的状态")])]),e._v(" "),t("li",[t("p",[e._v("保存中间状态，要切换分支但又不想提交")]),e._v(" "),t("p",[t("code",[e._v("git stash")]),e._v("  保存起来，分支回到最初状态")]),e._v(" "),t("p",[t("code",[e._v("git stash list")]),e._v("  查看已保存的内容")]),e._v(" "),t("p",[t("code",[e._v("git stash apply [stash@{0}]")]),e._v("  应用某个已保存的内容")]),e._v(" "),t("p",[t("code",[e._v("git stash drop [stash@{0}]")]),e._v("  丢弃已保存的内容")])]),e._v(" "),t("li",[t("p",[e._v("配置个人用户名及电子邮箱\n"),t("code",[e._v("git config user.name 'xxx'")]),e._v(" "),t("code",[e._v("git config user.email xxx@xxx")])])]),e._v(" "),t("li",[t("p",[e._v("配置自动push，不用输入账号密码")]),e._v(" "),t("p",[t("code",[e._v("git config --global credential.helper store")])]),e._v(" "),t("p",[t("code",[e._v("config --global push.default simple")])])]),e._v(" "),t("li",[t("p",[e._v("更改所有提交记录的邮箱信息")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" filter-branch --commit-filter "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\n        if [ \""),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$GIT_AUTHOR_EMAIL")]),e._v('" = "username@gmail.com" ];\n        then\n                GIT_AUTHOR_NAME="username";\n                GIT_AUTHOR_EMAIL="new_username@gmail.com";\n                git commit-tree "'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$@")]),e._v('";\n        else\n                git commit-tree "'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$@")]),e._v("\";\n        fi'")]),e._v(" HEAD\n")])])]),t("h3",{attrs:{id:"gitingore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gitingore"}},[e._v("#")]),e._v(" .gitingore")]),e._v(" "),t("ol",[t("li",[e._v("忽略一个特定的文件：/filename.extension")]),e._v(" "),t("li",[e._v("忽略所有同名的文件：filename.extension")]),e._v(" "),t("li",[e._v("忽略一个特定的目录：folder/ （这会连同其下所有子目录及文件都被忽略）")]),e._v(" "),t("li",[e._v("但是排除一个特定的模式：（在 3 的基础上）!folder/some/important/filename.extension")]),e._v(" "),t("li",[e._v("忽略指定目录下所有子目录下的特定文件：folder/**/filename.extension")]),e._v(" "),t("li",[e._v("同上，但是只匹配文件扩展名：folder/**/*.extension")]),e._v(" "),t("li",[e._v("同上，但是只匹配特定的目录：folder/**/tmp/")]),e._v(" "),t("li",[e._v("忽略一个根目录下的文件： /folder （不包括/folder2/folder，不包括/folder本身）")])]),e._v(" "),t("h3",{attrs:{id:"问题解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题解决"}},[e._v("#")]),e._v(" 问题解决")]),e._v(" "),t("p",[e._v("解决Git refusing to merge unrelated histories\n原因：\n方案：在git pull origin master后面跟上参数--allow-unrelated-histories")])])}),[],!1,null,null,null);_.default=i.exports}}]);